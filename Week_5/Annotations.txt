Week 5 : Aggregation Framework

Count (*)

db.products.aggregate(
	[
		{
			$group:
				{
					_id:"$manufacturer", // Es un alias
					num_products:
						{
							$sum:1// Cuenta
						}
				}
		}
	]
);

Pipeline - Aggregation

En aggregation se asigna un valor como array debido a que cada elemento asignado es una fase del
proceso de busqueda por medio de Aggregation.

Orden del proceso:
	- $project.- Selecciona las claves en las que esta inetresado, puede formar el documento.  ( 1 : 1 )
	- $match.- Realiza un filtrado de documentos. ( n : 1 )
	- $group.- Realiza una agrupacion, como la de arriba. ( n : 1 )
	- $sort.- Organiza. ( 1 : 1 )
	- $skip.- Salta registros. ( n : 1 )
	- $limit.- Limita los registros. ( n : 1 )
	- $unwind.- quita relacion de datos separa los datos sin repetir.

Agrupacion 2
	Es posible crear objetos complejos a partir de registros en la coleccion:

use agg
db.products.aggregate([
    {$group:
     {
	 _id: {
	     "manufacturer":"$manufacturer", 
	     "category" : "$category"},
	 num_products:{$sum:1}
     }
    }
])

Aplicaciones dentro de $gourp

	- $sum.- Similar al Count.
	- $avg.- Calcula el promedio.
	- $min.- Obtiene el menor de los valores.
	- $max.- Obtiene el mayor de los valores.
	- $push.- Construyen arrays.
	- $addtoSet.-
	- $first.- Obtiene el primero de los resultados.
	- $last.- Obtiene el ultimo de los resultados.


Eejemplo de $sum:
	db.zips.aggregate([{"$group" : {"_id" : "$state", "population" : { $sum : "pop" }}}])

Sobre el comando $avg

use agg
db.products.aggregate([
    {$group:
     {
	 _id: {
	     "category":"$category"
	 },
	 avg_price:{$avg:"$price"}
     }
    }
])

Sobre $addToSet

use agg
db.products.aggregate([
    {$group:
     {
	 _id: {
	     "maker":"$manufacturer"
	 },
	 categories:{$addToSet:"$category"}
     }
    }
])

//genera arrays que agrupan los valores sin repeticion

Sobre $push

use agg
db.products.aggregate([
    {$group:
     {
	 _id: {
	     "maker":"$manufacturer"
	 },
	 categories:{$push:"$category"}
     }
    }
])

// Genera arrays que agrupan los valores con repeticion ( si la hay en los registros )

acerca de la doble agrupacion

funciona de manera similar al GROUP BY x,y

db.grades.aggregate([
    {'$group':{_id:{class_id:"$class_id", student_id:"$student_id"}, 'average':{"$avg":"$score"}}},
    {'$group':{_id:"$_id.class_id", 'average':{"$avg":"$average"}}}])


Acerca de $project

Permite formatear los datos antes de presentarlos

	- Remove key 
	- Add key
	- Replace
	- To Upper
	- To Lower
	- Add
	- Sum
	- Multiply

ejemplo:

db.products.aggregate([
    {$project:
     {
	 _id:0,
	 'maker': {$toLower:"$manufacturer"},
	 'details': {'category': "$category",
		     'price' : {"$multiply":["$price",10]}
		    },
	 'item':'$name'
     }
    }
]);

5.1

db.posts.aggregate( [   { $project : { 'comments.author': 1 } },   { $unwind : "$comments" },   { $group : {     _id : { comments : "$comments" },     n : { $sum : 1 }     }   }, { $sort: {"n": -1} } ] )

Acerca de $match

Funciona basicamente como un WHERE o lo que va dentro de un .find()

db.zips.aggregate([
    {$match:
     {
	 state:"NY"
     }
    }
]);

Acerca de $sort = .sort de mongodb = order by mysql

Puede suar mucha memoria
Puede usarse antes o despues de group

db.zips.aggregate([
    {$match:
     {
	 state:"NY"
     }
    },
    {$group:
     {
	 _id: "$city",
	 population: {$sum:"$pop"},
     }
    },
    {$project:
     {
	 _id: 0,
	 city: "$_id",
	 population: 1,
     }
    },
    {$sort:
     {
	 population:-1
     }
    }   
])
db.zips.aggregate([{$sort:{state:1,city:1}}])


$skip y $limit = .skip() and .limit()

use agg
db.zips.aggregate([
    {$skip: 10},
    {$limit: 5}
])

 $first and $last Otra vez

db.zips.aggregate([
    /* get the population of every city in every state */
    {$group:
     {
	 _id: {state:"$state", city:"$city"},
	 population: {$sum:"$pop"},
     }
    },
     /* sort by state, population */
    {$sort: 
     {"_id.state":1, "population":-1}
    },

    /* group by state, get the first item in each group */
    {$group: 
     {
	 _id:"$_id.state",
	 city: {$first: "$_id.city"},
	 population: {$first:"$population"}
     }
    },

    /* now sort by state again */
    {$sort:
     {"_id":1}
    }
])

acerca de $unwind

unwind toma un array de valores y genera un documento por cada elemento de dicho array


limitaciones de aggregation framework

	- Limite de resultado es = 16 MB de datos.
	- puede usar mas del 10% de la memoria ( por el uso de sorting en memoria, aunque hace el proceso mas rapido que si fuera en disco).
	- funciona como un ambiente de sharding.

Es posible utilizar otros frameworks
	- MapReduce
	- Hadoop

